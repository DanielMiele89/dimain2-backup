-- =============================================
-- Author:		<Sam Weber>
-- Create date: <06 June 2020>
-- Description:	Looking at Bike purchases only for Peloton>
-- =============================================

CREATE PROCEDURE [ExcelQuery].[ROCEFT_Test_NaturalSalesByCycle_Calculate_PELOTON]
	@BrandList VARCHAR(500),
	@Bespoke BIT = 0,
	@TableName VARCHAR(500) = NULL,
	@AcquireL INT = NULL,
	@LapsedL INT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Prevent table locks forming
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DECLARE @time DATETIME

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- Start', @time OUTPUT

	----------------------------------------------------------------------------------
	-- Produce Brand(s) List that needs refreshing
	
	IF OBJECT_ID('tempdb..#Brand') IS NOT NULL DROP TABLE #Brand
	CREATE TABLE #Brand
		(	
			BrandID INT,
			BrandName VARCHAR(50)
		)

	IF @BrandList IS NULL
		BEGIN	
			INSERT INTO #Brand
				SELECT	BrandID,
						BrandName
				FROM	Warehouse.ExcelQuery.ROCEFT_BrandList

		END
	ELSE
		BEGIN
			INSERT INTO #Brand
				SELECT	BrandID,
						BrandName
				FROM	Warehouse.ExcelQuery.ROCEFT_BrandList
				WHERE	CHARINDEX(',' + CAST(BrandID AS VARCHAR) + ',', ',' + @BrandList + ',') > 0
		END

	CREATE CLUSTERED INDEX cix_BrandID ON #Brand (BrandID)

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #Brand', @time OUTPUT

	DECLARE @BrandCount INT = (SELECT COUNT(*) FROM #Brand)

		-- Test for Errors
	IF @Bespoke = 1
		BEGIN
			IF @TableName IS NULL 
			  BEGIN
				RAISERROR ('Error #1 --- You need to supply a table name in a bespoke forecast', 0, 1) WITH NOWAIT
				RETURN
			  END
			ELSE
				BEGIN
					IF (@AcquireL IS NOT NULL AND @LapsedL IS NULL) OR (@AcquireL IS NULL AND @LapsedL IS NOT NULL)
					  BEGIN
						RAISERROR ('Error #2 --- If you are specifying segment lengths, you must always specify both.', 0, 1) WITH NOWAIT
						RETURN
					  END
					IF 1 < @BrandCount
					  BEGIN
						RAISERROR ('Error #3 --- Bespoke Forecasting requires a single brand.', 0, 1) WITH NOWAIT
						RETURN
					  END
				END
		END


	----------------------------------------------------------------------------------
	-- Find relevant ConsumerCombinationIDs

	IF OBJECT_ID('tempdb..#CC') IS NOT NULL DROP TABLE #CC
	SELECT	cc.BrandID,
			cc.ConsumerCombinationID
	INTO	#CC
	FROM	Warehouse.Relational.ConsumerCombination cc WITH (NOLOCK)
	JOIN	#Brand br
		ON	cc.BrandID = br.BrandID
	WHERE MID in ('5000776', '2101435701', '5000679', '2101438020', '5000680', '2101438021', '5000681', '2101438023', '3011834', '2101438029', '5000652', '2101438031', '5000654', '2101438033', '5000656', '2101438036', '5000660', '2101438038', '5000664', '2101438042', '5000670', '2101438043', '5000722', '2101438046', '5000650', '2101438047', '5000703', '2101438050', '5000653', '2101438051', '5000655', '2101438052', '5000659', '2101438053', '5000663', '2101438061', '5000669', '2101437995', '5000672', '2101437999', '5000673', '2101438004', '5000661', '2101438006', '5000671', '2101438010', '5000678', '2101438012', '5000719', '2101438013', '5000685', '2101438015', '5000693', '2101438016', '5000696', '2101438017', '5000723', '2101437962', '5000725', '2101437963', '5000729', '2101437964', '5000726', '2101437965', '5000728', '2101437967', '5000675', '2101437969', '5000676', '2101437972', '5000677', '2101437976', '5000683', '2101437981', '5000686', '2101437987', '5000687', '2101437934', '5000688', '2101437935', '5000694', '2101437938', '5000695', '2101437939', '5000689', '2101437940', '5000692', '2101437944', '5000720', '5000777', '2101437946', '5000702', '2101437947', '5000705', '2101438162', '5000662', '2101438165', '5000701', '2101438170', '5000711', '2101438172', '5000715', '2101438174', '5000698', '2101438178', '5000699', '2101438180', '5000700', '2101438183', '5000713', '2101438184', '3018081', '2101438185', '5000761', '2101438186', '5000763', '2101438187', '5000764', '2101438191', '5000712', '2101438193', '5000760', '2101438194', '5000762', '2101438196', '5000772', '2101438198', '5000774', '2101438199', '5000775', '2101438200', '5000710', '2101438201', '5000766', '2101438202', '5000767', '2101438203', '5000770', '2101438204', '5000771', '2101438207', '5000704', '2101438208', '5000730', '2101438209', '5000735', '2101438210', '5000736', '2101438211', '5000742', '2101438212', '5000743', '2101438216', '5000747', '2101438219', '5000749', '2101438222', '5000754', '2101438226', '5000731', '2101438228', '5000733', '2101438229', '5000734', '2101438231', '5000737', '2101438232', '5000739', '2101438239', '5000741', '2101438241', '5000744', '2101438242', '5000745', '2101438244', '5000746', '2101438245', '5000750', '2101438247', '5000751', '3021001', '2101438249', '5000753', '2101438250', '5000758', '2101438251', '5000759', '2101482758', '2101437927', '5000778', '2217485', '2101438574', '2217457', '2101438579', '2217494', '2101438581', '2217480', '2101438582', '2217425', '2101438585', '3016609', '2101438587', '3016608', '2101438589', '2217458', '2101438591', '3016606', '2101438593', '3018986', '2101438595', '2217416', '2101438598', '2217415', '2101438602', '2217414', '2101438605', '5010585', '2101438607', '3016605', '2101438608', '3016604', '2101438609', '3016603', '2101438611', '2223358', '2101438613', '2217491', '2101438614', '2217490', '2101438617', '5015100', '2101438618', '2217497', '2101438619', '5015101', '2101438620', '7016886', '2101438621', '5016160', '2101438623', '5016158', '2101438625', '7016883', '2101438626', '2217489', '2101438627', '2217488', '2101438628', '2228174', '2101438629', '4030333', '2101438630', '6020198', '2101438632', '6020202', '2101438633', '3016635', '2101438634', '3016629', '2101438636', '2217424', '2101438637', '2217423', '2101438638', '2217452', '2101438641', '2217413', '8022620', '2101438644', '6020197', '3016653', '2101438645', '2217463', '2101438647', '2217464', '2101438648', '2217465', '2101438649', '2217466', '2101438650', '2217478', '2101438651', '2217477', '2101438652', '2217460', '2101438653', '2217476', '2101438654', '2217468', '2101438655', '2217473', '2101438656', '2217481', '2101438657', '2217482', '2101438658', '2217483', '2101438660', '2217467', '2101438661', '609999999999999', '7011690', '2101438662', '2217417', '2101438664', '2217471', '2101438665', '3016637', '2101438666', '2217470', '2101438667', '3016618', '2101438668', '3016634', '2101438669', '3016646', '2101440496', '3016628', '2101438672', '2217427', '2101438673', '3016645', '2101438674', '3016644', '2101438529', '2217472', '2101438530', '2217484', '2101438531', '2217435', '2101438533', '2217475', '2101438535', '2217434', '2101438538', '2217459', '2101438540', '2217469', '2101438544', '8022548', '2217433', '7159442', '7162683', '7164651', '1114656', '7168546', '7168544', '7168543', '2101438547', '2217432', '2101438550', '2217436', '2101438552', '2217451', '2101438554', '2217456', '2101438555', '3016627', '7168541', '7168540', '7168539', '1107209', '2101438558', '2217431', '2101438560', '2217430', '1107208', '2101438561', '2217437', '2101438563', '2217429', '2101438566', '3016626', '2101438568', '3016630', '2101438487', '3016625', '2101438489', '3016624', '2101438490', '2217439', '2101438492', '2217440', '2101438493', '3016622', '2101438494', '3016621', '2101438496', '3016617', '2101438499', '2217441', '2101438500', '3016642', '2101438501', '3016616', '2101438502', '3016614', '2101438504', '3016641', '2101438506', '3016613', '2101438508', '3016612', '2101438509', '3016619', '2101438510', '3016640', '2101438511', '3016639', '2101438512', '3016647', '2101438513', '3016648', '2223499', '2101438422', '2217486', '2101438426', '2217496', '2101438429', '2217428', '2101438432', '2217450', '2101438439', '3016633', '2101438442', '3016632', '2101438443', '3016636', '2101438446', '3016611', '2101438449', '3016610', '2101438450', '3016620', '2101438452', '2217449', '2101438453', '2217422', '7168538', '2101438454', '2217421', '2101438457', '2217419', '2101438458', '2217426', '2101438460', '2217447', '2101438461', '2217445', '2101438463', '2217444', '2101438464', '2217443', '2101438466', '2217442', '2101438573', '2101435704', '3001467', '600000001040302', '2101438777', '3001499', '600000001040831', '2101438778', '3001470', '600000001040542', '2101438779', '3001471', '600000001044890', '2101438780', '3001472', '600000001044908', '2101438781', '3001473', '600080100155126', '2101438782', '3001474', '600401001500783', '2101438783', '3001475', '600401001500784', '2101438784', '3001477', '602222222222222', '2101438785', '3001478', '600801001501709', '2101438786', '3001479', '600801001501710', '2101438787', '3001480', '2101438788', '3001481', '600801001044890', '2101438789', '3001482', '600801001501711', '2101438790', '3001485', '600080100151120', '2101438791', '3001486', '608010015130190', '2101438792', '3001487', '601234567891234', '2101438793', '3001489', '2101438794', '3001490', '2101438795', '3001491', '2101438796', '3001493', '2101438797', '4032970', '2101438798', '4032971', '2101438799', '4032972', '2101438800', '4032969', '1110302', '1118752', '2101438806', '2101438801', '3001495', '2101438802', '3001496', '600801001500170', '2101438803', '8012946', '2101438804', '8012945', '2101438805', '6016450', '2101488532', '3001498', '600000001044090', '2101438807', '3001929', '600801001038082', '2101438808', '3001931', '600801001040278', '2101438809', '3001932', '600801001042233', '2101438810', '3001933', '600801001042217', '2101438811', '3001934', '600801001064765', '2101438812', '3001935', '600801001500367', '2101438813', '3001936', '600801001506024', '2101438814', '3001937', '608001001511945', '2101438815', '3001938', '600801001513225', '2101438816', '3001939', '608010015246200', '4001631', '601234567891011', '2101438817', '3001940', '600801001501201', '2101438818', '3001941', '600801001501331', '2101438819', '3001942', '600801001502642', '2101438820', '3001943', '600801001504611', '2101438821', '4001611', '600801001505122', '2101438822', '4001612', '600801001511035', '2101438823', '4001613', '600801001513021', '2101438824', '4001614', '600801001513343', '2101438825', '4001615', '600801001514401', '2101438826', '4001617', '600801001510653', '2101438827', '4001618', '600801001525400', '2101438828', '4001621', '600801001530437', '2101438829', '4001622', '2101438830', '4001623', '2101438831', '4001625', '603521123710000', '2101438832', '4032973', '600000004032973', '2101438833', '4032976', '600000004032976', '12345678910', '2101488531', '401001524497', '501001524497', '2101438834', '4001629', '603515345180000', '2101438835', '4001630', '1234567891011', '2101438836', '600000007015364', '7015364', '1234567981011', '123346978145', '2101438837', '3001514', '600801001501193', '2101438838', '3001515', '600801001501414', '2101438839', '3001516', '600801001501413', '2101438840', '3001517', '600801001502868', '2101438841', '3001519', '600801001505011', '2101438842', '3001520', '600801001506892', '2101438843', '3001521', '600801001510524', '2101438844', '3001522', '601234567123451', '2101438845', '3001523', '601801001513163', '2101438846', '3001524', '601801001513162', '2101438675', '3001525', '600801001508871', '2101438676', '3001527', '608010015266529', '2101438678', '3001528', '600801001514224', '2101438679', '3001529', '600801001525623', '2101438680', '3001530', '600801001514027', '2101438681', '3001531', '601234567891023', '2101438682', '3001532', '600801001501135', '2101438683', '3001533', '600801001511123', '2101438684', '3001535', '600801001525433', '2101438685', '3001536', '600801001513968', '2101438686', '3001537', '600801001526450', '2101438687', '3001538', '600801001507794', '2101438689', '3001539', '600801001514090', '2101438690', '3001544', '601001530406000', '2101438691', '3001545', '601001530409000', '2101438692', '3001546', '601001530411000', '2101438693', '3001549', '601001530439001', '2101438694', '3001550', '601001530451000', '2101438695', '3001551', '601001530452001', '2101438696', '3001552', '601001530453001', '2101438697', '3001554', '601001530905123', '2101438698', '3001555', '601234567890123', '2101438699', '3001556', '2101438700', '3001562', '2101438701', '3001553', '2101488530', '2101438702', '3032397', '600000003032397', '3032396', '2101438705', '3032401', '600000003032401', '2101438706', '3032402', '3001543', '2101438707', '3002139', '600000001508684', '2101438708', '3002140', '600801001508808', '2101438709', '3002141', '600801001509110', '2101438710', '3002142', '600801001510808', '2101438711', '3002143', '600801001511246', '2101438712', '3002148', '600801001511991', '2101438713', '3002149', '600802001038215', '2101438714', '3002150', '600801001513006', '2101438715', '3002153', '608010015132750', '2101438716', '3002152', '2101438717', '2202376', '600000352114989', '2101438718', '2202377', '600801001524380', '2101438719', '3002155', '600801001524528', '2101438720', '3002156', '600801001525112', '2101438721', '3002157', '600801001511943', '2101438722', '3002158', '600801001512489', '2101438723', '3002159', '600801001513276', '2101438724', '3002160', '600801001513245', '2101438725', '3002161', '600801001513233', '2101438726', '3002162', '600000352114997', '2101438727', '3002163', '600801001513643', '2101438728', '3002164', '600801001524323', '2101438729', '3002165', '600801001524404', '2101438730', '3002166', '600801001524754', '2101438731', '3002167', '600801001526122', '2101438732', '3002168', '600801001526425', '401001525334', '501001525334', '600801001525334', '2101438733', '2202378', '2101438734', '2202379', '600801001513223', '2101438735', '3002170', '600801001511553', '2101438736', '3002176', '600000054394039', '2101438737', '4032963', '2101445875', '7147793', '2101488529', '3002178', '600801001524750', '2101438742', '3001957', '600801001508519', '2101438743', '3001958', '600801001509042', '2101438745', '3001960', '600801001510300', '2101438746', '3001961', '600801001510941', '2101438747', '3001962', '600801001511185', '2101438748', '3001964', '600801001512875', '2101438749', '3001965', '600801001513370', '2101438750', '3001966', '600008010015137', '2101438751', '3001967', '600801001525583', '2101438752', '3001968', '608010015119820', '2101438753', '3001969', '2101438754', '3001970', '2101438755', '3001972', '600801001511949', '2101438756', '3001974', '600801001513530', '2101438757', '3001975', '600801001514402', '2101438758', '3001976', '600801001524328', '2101438759', '3001978', '600801001514223', '2101438760', '3001979', '600801001514219', '2101438761', '3001980', '600801001514354', '2101438762', '3001993', '600801001514408', '2101438763', '3001981', '600801001509619', '2101438764', '3003353', '603535857250000', '2101438765', '3001982', '2101438766', '2210977', '2101438769', '4032956', '600801001508615', '2101438770', '4032957', '600801001508634', '2101438771', '4032958', '2101438772', '4032960', '2101438774', '4032962', '4032977', '2101438775', '3001986', '600801001513283', '2101438776', '3001987', '3003354', '600801001524597', '4032954', '3001959', '3002187', '600801001527634', '2101437929', '2101445878', '3002188', '2101485631', '3002189', '2101435807', '4001881', '600000008469587', '2101438371', '4001882', '600000008475592', '2101438373', '4001883', '600000008484677', '2101438376', '4001884', '600000008484685', '2101438378', '4001885', '600000008496408', '2101438381', '4001886', '600000008497760', '2101438384', '4001887', '600000008512824', '2101438386', '2201944', '600000008551228', '2101438391', '2201946', '600000008555690', '2101438392', '2201947', '600000008772438', '2101438394', '2201948', '600000008867238', '2101438396', '2201949', '600000009004515', '2101438397', '2201950', '600000009007479', '2101438398', '2201951', '600000009007488', '2101438401', '2201953', '600000009149245', '2101438402', '2201954', '600000009149361', '2101438404', '2201955', '600000009231137', '2101438408', '2201956', '2101438411', '2201957', '600000008913330', '2101438414', '7002664', '2101438415', '3020785', '2101438418', '2201958', '600000011346527', '1152842', '2101438421', '600000001152842', '2101438469', '2201959', '600000011671069', '7019143', '7019142', '2101457825', '7019141', '2201962', '2201961', '600000008981382', '123456', '5004707', '2101438370', '2101435869', '5272505', '600000001376045', '2101439425', '5272513', '600000001376052', '2101440154', '5272521', '600000001422971', '2101440155', '5272539', '600000001430644', '2101440157', '5272547', '600000001849918', '2101440158', '5272554', '600000001628510', '2101440162', '5272570', '600000001608520', '2101440163', '5272620', '600000001677103', '2101440164', '5272638', '600000001936970', '2101440165', '5272646', '600000002037380', '2101440166', '5272653', '600000001936954', '2101440167', '5272661', '600000003715216', '2101440170', '5272679', '600000003715208', '2101440171', '5272687', '600000001026467', '2101440172', '5272695', '600000001687243', '2101440173', '5272703', '1050127', '2101440174', '5272927', '601100004008223', '2101440177', '5272711', '600000003318144', '2101440178', '5272729', '601100004008256', '2101440179', '5272745', '600009423802966', '2101440180', '5272752', '601100003828233', '2101440181', '5272786', '601100003486693', '2101440183', '5272794', '600000004088191', '2101440184', '5272802', '600000004308409', '2101440185', '5272810', '600000004775284', '2101440186', '5272828', '600000088888888', '1023487', '2101440189', '601199999999999', '1105715', '2101440190', '600000000012345', '2101440191', '600000008002729', '7002695', '2101440193', '5007726', '600000005007581', '2101440194', '5012228', '600000005012335', '2101440195', '600000008011169', '6011648', '2101440196', '600000006011574', '6011646', '2101440197', '5272836', '600000003715190', '2101440198', '5272844', '600000002037406', '2101440199', '5272851', '600000002037414', '2101440200', '600000000088888', '7001350', '2101440201', '5272869', '2101440202', '5272877', '2101440203', '5272885', '2101440204', '5272893', '2101440205', '5272901', '2101440206', '5272919', '1005801', '2101440207', '600008888888888', '2101440208', '600000008888888', '7396328', '2101440209', '59101100994', '2101440210', '600000008018512', '7020334', '2101440211', '5012229', '600000005012334', '2101440212', '5016946', '600000005016952', '2101439426', '5238019', '2101440322', '5238027', '2101440323', '5238035', '2101440324', '5238043', '2101440325', '5238050', '2101440326', '5238076', '2101440327', '5238084', '600000001497361', '2101440328', '5238118', '600000001497338', '2101440329', '5238126', '2101440330', '5238142', '2101440331', '5238159', '2101440332', '5238167', '2101440333', '5238175', '2101440334', '5238183', '2101440335', '5238191', '2101440336', '5238209', '600000001892124', '2101440337', '5238217', '2101440338', '5238225', '2101440339', '5238233', '600059100101993', '2101440340', '5238241', '2101440213', '5238258', '2101440214', '5238266', '5238274', '600000001932383', '2101440215', '5238282', '2101440216', '5238316', '2101440217', '5238324', '2101440218', '5238332', '2101440220', '5238340', '2101440221', '5238357', '2101440222', '5238365', '2101440223', '5238373', '5238399', '2101440224', '5238415', '699999999999999', '2101440226', '5238423', '2101440227', '5238431', '2101440228', '5238449', '2101440229', '5238456', '600000000888888', '2101440230', '5238464', '2101440231', '5238472', '2101440232', '7666928', '1048166', '2101440233', '2101440234', '5238498', '2101440235', '5238514', '5238522', '2101440236', '6234249', '2101440237', '5238555', '2101440238', '5238563', '2101440239', '5238571', '2101440240', '5238589', '2101440241', '5238597', '2101440242', '5246939', '2101440243', '5246947', '2101440244', '5246954', '2101440245', '5246962', '2101440246', '5246970', '2101440247', '5246988', '2101440248', '5246996', '2101440249', '5247002', '2101440250', '5247010', '2101440252', '5247028', '2101440253', '5247036', '2101440254', '5247069', '2101440255', '5247077', '2101440256', '5247085', '2101440257', '5247093', '2101440258', '4442828', '2101440259', '5542683', '2101440260', '6444467', '2101440261', '6557599', '2101440262', '6508477', '2101440263', '6562961', '2101440264', '6602866', '2101440265', '6602874', '2101440267', '6749063', '2101440268', '2231166', '2101440270', '6839500', '2101440271', '6879076', '2101440272', '7243314', '2101440273', '7234875', '2101440274', '7286149', '2101440276', '7456445', '2101440277', '7472012', '2101440278', '7243322', '2101440279', '7690415', '2101440280', '7897333', '59100129994', '3110905', '59100127998', '59100128996', '59100101993', '2101440282', '5247101', '2101440283', '5247127', '2101440285', '5247135', '2101440286', '5247143', '1038119', '2101440288', '1057212', '2101440289', '1071270', '2101440290', '1096581', '2101440292', '1084100', '2101440294', '1096582', '2101440295', '1082190', '2101440296', '2101440298', '3000196', '2101440300', '5247168', '2101479924', '608888888888888', '7145135', '2101440301', '4006249', '600000004006055', '2101440302', '4018942', '2101440303', '3012330', '2101440304', '3012331', '600000004012888', '2101440305', '6007720', '2101440306', '5008104', '600000004019232', '2101440307', '5247184', '2101440308', '5247192', '2101440309', '5247200', '2101440310', '5247218', '2101457873', '7141301', '2101503005', '7151357', '1090381', '2101440312', '2101440313', '5247242', '2101440314', '5247259', '1126063', '2101498536', '2101440315', '6224109', '2101440316', '5247267', '1088355', '2101440317', '1101651', '2101440318', '2101440319', '4001274', '59100116991', '1243286', '2101439427', '5263587', '2101440341', '5263595', '2101440342', '5263603', '2101440343', '5263611', '2101440344', '5263629', '2101440345', '5263637', '2101440346', '5263652', '2101440347', '5263660', '2101440348', '5263678', '2101440349', '5263686', '2101465361', '5263694', '2101440350', '5263728', '2101440351', '5263736', '2101440352', '5263751', '2101440353', '5263769', '2101440354', '5263777', '2101440355', '5263785', '2101440356', '5263793', '2101440357', '5263801', '2101440358', '5263819', '2101440359', '5263827', '2101440360', '5263835', '2101440361', '5263843', '2101440362', '5263850', '2101440363', '5263876', '2101440364', '5263884', '2101440365', '5317318', '2101440366', '5263918', '2101440367', '5263926', '2101440368', '6374128', '2101440369', '7566698', '2101440370', '7421019', '1016410', '2101440371', '601188888888888', '2101440372', '5313655', '1055432', '2101440373', '1087338', '2101440374', '1087339', '2101440375', '2101440376', '5012112', '2101440377', '5021387', '2101440378', '7158847', '2101440379', '3011311', '2101440380', '7005664', '2101440381', '7139820', '5263942', '5263983', '600000003802089', '2101440382', '7456395', '59100200993', '2101439429', '5252531', '2101440384', '5252564', '2101440385', '5252572', '2101440386', '5252580', '2101440387', '5252622', '2101440388', '5252630', '2101440389', '5252648', '2101440390', '5252655', '2101440391', '5252663', '2101440392', '5252671', '2101440393', '5252689', '2101440394', '5252697', '2101440395', '5252705', '600000003120789', '2101440396', '5252713', '2101440397', '5252739', '2101440398', '5252747', '2101440399', '5252754', '2101440400', '5252762', '600000002762540', '2101440401', '6452551', '2101440402', '5252770', '600000003026572', '2101440403', '5252788', '600000003715802', '2101440404', '5252796', '600000003920105', '2101440405', '5252804', '2101440406', '5252812', '2101440407', '5252820', '2101440408', '5252838', '600000001950534', '2101440409', '5252846', '600000003273596', '2101440410', '5252853', '2101440411', '5252861', '2101440412', '5252879', '2101440413', '5252895', '2101440414', '5252903', '2101440415', '5252937', '2101440416', '5252945', '2101440417', '5252952', '2101440418', '5252960', '2101440419', '5508676', '2101440420', '6585574', '2101440421', '6731632', '2101440422', '6879027', '2101440423', '6879035', '2101440424', '6970834', '1110320', '2101474087', '1003407', '2101440425', '1041181', '2101440426', '1074262', '2101440427', '1078627', '2101440428', '2101440429', '7000913', '2101440430', '4017207', '2101440431', '600000007010316', '8010270', '2101440432', '600000007010318', '8010271', '1110319', '2101483977', '2101493238', '2970606', '600000002970606', '2101440433', '5264601', '600000000000002', '2101440434', '5264700', '600000001215995', '5252994', '2101440436', '4020248', '600000004020265', '2101439431', '5264593', '600000000000001', '2101441362', '5264619', '600000000000003', '2101441363', '5264627', '600000000000004', '2101441364', '5264635', '600000000000405', '2101441365', '5264643', '600000000000006', '1088754', '2101441366', '600000000000407', '2101441367', '5264650', '600000003948841', '2101441369', '5264668', '600000002492763', '2101441370', '5264676', '600000001025964', '2101441373', '5264692', '600000001537232', '2101441374', '7110802', '2101441376', '600000000000015', '7767098', '2101441377', '5264734', '600000000000020', '2101441379', '5264759', '600000000000021', '2101441381', '5264767', '600000000000022', '2101441383', '5264775', '600000000000023', '2101441385', '5264791', '600000000000024', '2101441386', '5264809', '600000000000025', '2101441387', '5264817', '600000003091170', '2101441388', '5264833', '600000004342820', '2101441390', '3014725', '2101441394', '5264858', '600000000000031', '2101465362', '600000000000034', '7792559', '2101441398', '5264874', '600000003657699', '2101441399', '5264882', '600000000000051', '2101441401', '600000000000052', '7848989', '2101441403', '5264890', '600000000000053', '2101441404', '5263744', '59100426994', '59100400999', '2101441405', '5270525', '2101441407', '5270533', '2101441408', '5270541', '2101441410', '5270558', '2101441412', '5270566', '2101469465', '7165727', '2101441414', '5270574', '2101441415', '5270582', '2101441416', '5270590', '2101441417', '3002689', '2101441419', '5270608', '2101441423', '5270616', '1088268', '2101441424', '2101441425', '4001959', '2101441426', '5270624', '2101441427', '5270657', '2101441428', '5270681', '2101441429', '5270707', '2101441431', '5493929', '1003405', '2101441432', '2218900', '2101441433', '5004063', '2101441434', '5270749', '2101441436', '5270772', '2101441438', '5270798', '1013107', '2101441440', '1019443', '2101441442', '601100000000000', '2101441445', '5004062', '2101441448', '5270806', '2101440651', '5270814', '1059124', '2101440653', '2101439432', '5264049', '600000001054790', '2101440656', '5264056', '600000001066877', '2101440657', '5264072', '600000001099688', '2101440660', '4051207', '600000005231949', '2101440661', '5264098', '600000003511330', '2101440662', '5264106', '600000003964210', '2101440663', '5264122', '600000003902814', '2101440664', '5264130', '600000003964228', '2101440665', '5264163', '600000004722633', '2101440666', '5264189', '600000001362532', '2101440668', '5264197', '600000001374172', '2101440670', '5264205', '600000001374222', '2101440673', '5264213', '600000001374198', '2101440674', '5264239', '600000001374214', '2101440675', '5264247', '600000001655422', '2101440676', '5264254', '2101440677', '5264270', '2101440678', '600000006516280', '6516298', '2101440679', '600000007101835', '7101900', '2101440680', '600000006731525', '6731616', '2101440682', '600000006957963', '6957971', '2101440683', '600000007079601', '7076177', '2101440684', '600000007176928', '7176845', '1071024', '2101440685', '600000001071023', '1092264', '2101440686', '600000001092210', '2101440687', '3006150', '600000004006277', '2101440688', '600000008000953', '8001044', '2101442081', '600000008002060', '7002188', '600000007157765', '7160274', '2101440692', '600000005018895', '8018877', '2101440693', '5264288', '600000004840559', '2101440694', '5264296', '600000001066885', '2101440695', '5264304', '600000001058197', '2101440696', '5264312', '600000001066901', '2101440698', '5940747', '600000005935333', '2101440702', '5264320', '600000001949452', '2101440703', '600000005020097', '6018735', '2101440704', '5264346', '600000001099696', '2101440705', '5264353', '600000001949460', '2101440706', '5400882', '600000005081542', '2101440707', '5264387', '600000001243369', '2101440708', '5264395', '600000002433167', '59100500996', '5264536', '2101440709', '5012115', '600000005012152', '2101439434', '5267430', '600000001055359', '2101440710', '5267455', '600000001125327', '2101440711', '5267471', '600000001066919', '2101440712', '5267489', '600000001132448', '2101440713', '5267497', '600000001129071', '2101440714', '5267505', '600000003650355', '2101440715', '5267513', '600000003442480', '2101440717', '5586482', '2101440718', '5267521', '600000002111169', '2101440719', '5267547', '600000001185529', '2101440721', '5267554', '600000001473834', '1088995', '2101440722', '600000001088997', '1096837', '2101440723', '600000001096836', '1133144', '2101499734', '2101440724', '5267562', '600000002276673', '5267570', '600000001954411', '2101440725', '5267588', '2101440726', '5267596', '600000001954445', '2101440727', '5267604', '600000008483166', '2101440728', '5267612', '600000003650348', '2101467660', '600000007716392', '7690530', '01133145', '2101502616', '2101440729', '5267620', '600000001125301', '2101440730', '5267638', '600000004033130', '2101440731', '600000006540165', '6526073', '2101440732', '600000009987236', '6495477', '2101440733', '3003309', '600000003003244', '2101440734', '600000007008890', '7008888', '2101440735', '5267646', '600000003967304', '2101440736', '5267653', '600000001355239', '2101442072', '5267679', '600000002276715', '2101440738', '5267695', '600000002111110', '2101440739', '4008197', '600000003008326', '2101440740', '3013501', '600000004014077', '59100600994', '600000004457081', '59100610993', '59100611991', '59100601992', '59100602990', '2101440741', '600000007015692', '7015553', '2101439437', '5274220', '600000000000000', '2101440742', '5274238', '2101440743', '5274246', '2101440745', '5274253', '2101440746', '5274261', '2101440747', '5274279', '2101440748', '5274287', '2101440749', '5274295', '2101440750', '5274303', '2101440751', '5274329', '2101440752', '5274337', '2101440753', '5274360', '2101440754', '5274378', '2101440755', '5274386', '2101440756', '5274394', '2101440758', '5667563', '2101440759', '5908033', '2101440760', '6630503', '2101440761', '5274410', '2101440762', '5274428', '2101440763', '6759708', '2101440764', '7737612', '2101440765', '600000007760358', '7737596', '1079041', '2101440767', '601079405999999', '2101440768', '6614051', '2101440769', '5667571', '2101440770', '5274436', '2101440771', '5274444', '2101440772', '5274451', '2101440773', '5274469', '2101440774', '5274477', '2101440775', '5274485', '1082492', '2101440776', '601083451999999', '1083449', '2101440777', '601084099999999', '2101440778', '3005977', '604006389999999', '2101440781', '5274501', '2101440782', '5274519', '2101440783', '5748678', '2101440784', '6602924', '2101440785', '6731624', '2101440786', '7220635', '2101440788', '5252978', '2101440789', '5252911', '1080825', '2101440790', '2101440791', '4018976', '606007917999999', '607140920999999', '7140575', '2101465363', '607144275999999', '7145772', '3107422', '2101440792', '5264841', '2101440793', '5264866', '600000000000032', '5274527', '5274535', '4573952', '5272976', '3063252', '59100330998', '3115607', '8020552', '5264551', '5179692', '2101439424')
	CREATE CLUSTERED INDEX cix_ConsumerCombination ON #CC (BrandID, ConsumerCombinationID)
	-- (879,656 rows affected) / 00:00:03

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #CC', @time OUTPUT

	----------------------------------------------------------------------------------
	-- Find a 1.5m sample set of customers

	IF OBJECT_ID('tempdb..#Customer') IS NOT NULL DROP TABLE #Customer
	CREATE TABLE #Customer
		(	
			CINID INT
		)

	IF @Bespoke = 1
		BEGIN
			EXEC('
					INSERT INTO #Customer
						SELECT	CINID
						FROM	' + @TableName + '
			')
		END
	ELSE
		BEGIN
			INSERT INTO #Customer
				SELECT	TOP 1500000 *
				FROM	(
							SELECT	CINID
							FROM	Warehouse.Relational.Customer c
							JOIN	Warehouse.Relational.CINList cl
								ON	cl.CIN = c.SourceUID
							WHERE	c.CurrentlyActive = 1
								AND NOT EXISTS
									(
										SELECT	*
										FROM	Warehouse.Staging.Customer_DuplicateSourceUID dup
										WHERE	EndDate IS NULL
											AND c.SourceUID = dup.SourceUID
									)
						) a
				-- ORDER BY CINID -- Enable for TESTING purposes
				ORDER BY NEWID() -- Disable for TESTING purposes
		END

	CREATE CLUSTERED INDEX cix_CINID ON #Customer (CINID)

	-- (1500000 rows affected) / 00:00:09

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #Customer', @time OUTPUT
	
	DECLARE @TotalCustomers INT = (SELECT COUNT(*) FROM #Customer)

	----------------------------------------------------------------------------------
	-- Dates CTE

	IF OBJECT_ID('tempdb..#Dates') IS NOT NULL DROP TABLE #Dates
	CREATE TABLE #Dates
		(
			ID INT NOT NULL PRIMARY KEY
			,CycleStart DATE
			,CycleEnd DATE
			,Seasonality_CycleID INT
		)

	;WITH CTE
	 AS (	
			SELECT	1 AS ID
					,CAST('2015-04-02' AS DATE) AS CycleStart
					,CAST('2015-04-29' AS DATE) AS CycleEnd
					,4 AS Seasonality_CycleID
		
			UNION ALL
		
			SELECT	ID + 1
					,CAST(DATEADD(DAY,28,CycleStart) AS DATE)
					,CAST(DATEADD(DAY,28,CycleEnd) AS DATE)
					,CASE
						WHEN Seasonality_CycleID < 13 THEN Seasonality_CycleID + 1
						ELSE Seasonality_CycleID - 12
					 END
			FROM	CTE
			WHERE	ID < 68
		)
	INSERT INTO #Dates
		SELECT	* 
		FROM	CTE
	OPTION (MAXRECURSION 68)
	-- (68 rows affected) / 00:00:01

	--SELECT * FROM #Dates

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #Dates', @time OUTPUT


	----------------------------------------------------------------------------------
	-- Dates Subsetted - Most Recent allowing for Transactional Lag
	
	IF OBJECT_ID('tempdb..#WorkingDates') IS NOT NULL DROP TABLE #WorkingDates
	SELECT	b.*
			,ROW_NUMBER() OVER (ORDER BY b.ID ASC) AS DateRow
	INTO	#WorkingDates
	FROM	(SELECT	*
			 FROM	#Dates 
			 WHERE	CycleStart <= CAST(DATEADD(DAY,-7,GETDATE()) AS DATE)
				AND CAST(DATEADD(DAY,-7,GETDATE()) AS DATE) <= CycleEnd) a
	JOIN	#Dates b
		ON  a.ID - 15 < b.ID
		AND b.ID < a.ID

	CREATE CLUSTERED INDEX cix_DateRow ON #WorkingDates(DateRow)
	--CREATE NONCLUSTERED INDEX nix_CycleStart ON #WorkingDates(CycleStart)
	--CREATE NONCLUSTERED INDEX nix_CycleEnd ON #WorkingDates(CycleEnd)
	-- (14 rows affected) / 00:00:00

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #WorkingDates', @time OUTPUT


	----------------------------------------------------------------------------------
	-- Segment Lengths

	IF OBJECT_ID('tempdb..#Settings') IS NOT NULL DROP TABLE #Settings
	SELECT	br.BrandName
			,br.BrandID
			,COALESCE(part.Acquire,blk.acquireL,lk.AcquireL,12) as AcquireL
			,COALESCE(part.Lapsed,blk.LapserL,lk.LapserL,6) as LapserL
			,br.SectorID
	INTO	#Settings
	FROM	Warehouse.Relational.Brand br
	LEFT JOIN	
		(		SELECT	DISTINCT p.BrandID,
						part.Acquire,
						part.Lapsed
				FROM	Warehouse.Relational.Partner p
				JOIN	Warehouse.Segmentation.ROC_Shopper_Segment_Partner_Settings part
					ON	p.PartnerID = part.PartnerID
				WHERE	EndDate IS NULL
		) part
		ON	br.BrandID = part.BrandID
	LEFT JOIN	Warehouse.ExcelQuery.ROCEFT_BrandSegmentLengthOverride blk 
			on	br.BrandID = blk.BrandID
	LEFT JOIN	Warehouse.ExcelQuery.ROCEFT_SectorSegmentLengthOverride lk 
			on	br.SectorID = lk.SectorID
	JOIN	#Brand b
		ON	br.BrandID = b.BrandID

	CREATE CLUSTERED INDEX cix_BrandID ON #Settings (BrandID)
	-- (450 rows affected) / 00:00:01

	UPDATE s
	SET	AcquireL = 60
	FROM #Settings s
	WHERE 60 < AcquireL

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #Settings', @time OUTPUT
		
	-- Apply Bespoke Filters
	IF @AcquireL IS NOT NULL AND @LapsedL IS NOT NULL
		BEGIN
			UPDATE s
			SET AcquireL = @AcquireL,
				LapserL = @LapsedL
			FROM #Settings s
		END

	-- Test if single brand, print out segment settings if so.
	IF @BrandCount = 1
		BEGIN
			SELECT * FROM #Settings
			
			SELECT	'CustomerCount', @TotalCustomers AS CustomerCount
		END

	----------------------------------------------------------------------------------
	-- Date Table + Segment Lengths

	IF OBJECT_ID('tempdb..#JoinDates') IS NOT NULL DROP TABLE #JoinDates
	SELECT	ID,
			BrandID,
			CAST(DATEADD(MONTH,-b.AcquireL,DATEADD(DAY,-1,CycleStart)) AS DATE) AS AcquireDate,
			CAST(DATEADD(MONTH,-b.LapserL,DATEADD(DAY,-1,CycleStart)) AS DATE) AS LapsedDate,
			CAST(DATEADD(DAY,-1,CycleStart) AS DATE) AS MaxDate,
			CycleStart,
			CycleEnd,
			Seasonality_CycleID,
			DateRow
	INTO	#JoinDates
	FROM	#WorkingDates a
	CROSS JOIN #Settings b

	CREATE CLUSTERED INDEX cix_ID ON #JoinDates (DateRow, BrandID)

	-- (6300 rows affected) / 00:00:00

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #JoinDates', @time OUTPUT

-- ===============================================================================================================================
--------------------------------------------------------------------------------------------------------------------------------
	-- Pull Transaction Data To Segment Customers
	DECLARE @MinDate DATE,
			@MaxDate DATE
	SELECT	@MinDate = MIN(AcquireDate),
			@MaxDate = MAX(MaxDate)
	FROM	#JoinDates
	WHERE	DateRow = 1

	IF OBJECT_ID('tempdb..#InitialSegmentation') IS NOT NULL DROP TABLE #InitialSegmentation
	SELECT	lt.BrandID,
			lt.CINID,
			lt.LastTransactionDate,
			x.CurrentSegmentation,
			0 AS NewSegmentation
	INTO #InitialSegmentation
	FROM (SELECT * FROM #JoinDates WHERE DateRow = 1) d -- 450 rows
	CROSS APPLY (
		SELECT	cc.BrandID,
				ct.CINID,
				MAX(TranDate) AS LastTransactionDate
		FROM Warehouse.Relational.ConsumerTransaction_MyRewards ct WITH (NOLOCK)
		INNER JOIN #CC cc 
			ON ct.ConsumerCombinationID = cc.ConsumerCombinationID
		JOIN #Customer c
			ON ct.CINID = c.CINID
		WHERE cc.BrandID = d.BrandID  
			AND 0 < ct.Amount AND ct.Amount >= 1800
			AND	@MinDate <= ct.TranDate AND ct.TranDate <= @MaxDate
		GROUP BY cc.BrandID,
				 ct.CINID
	) lt
	CROSS APPLY (
		SELECT CurrentSegmentation = CASE
			  WHEN lt.LastTransactionDate < d.AcquireDate THEN 7
	          WHEN d.AcquireDate <= lt.LastTransactionDate AND lt.LastTransactionDate < d.LapsedDate THEN 8
			  ELSE 9
			END
	) x
	WHERE x.CurrentSegmentation <> 7

	CREATE CLUSTERED INDEX cix_BrandID_CINID ON #InitialSegmentation (BrandID,CINID)
	-- (37,878,677 rows affected) / 00:03:05

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #InitialSegmentation', @time OUTPUT

---------------------------------------------------------------------------------------------
-- 14 loops, one for each cycle in #WorkingDates
---------------------------------------------------------------------------------------------
	IF OBJECT_ID('tempdb..#SegmentOutput') IS NOT NULL DROP TABLE #SegmentOutput -- results table
		CREATE TABLE #SegmentOutput 
			(DateRow INT, BrandID INT, Segment INT, Sales MONEY, OnlineSales MONEY, Transactions INT, OnlineTransactions INT, Shoppers INT, OnlineShoppers INT)

	IF OBJECT_ID('tempdb..#SegmentSize') IS NOT NULL DROP TABLE #SegmentSize
		CREATE TABLE #SegmentSize
			(DateRow INT, BrandID INT, Segment INT, Population INT)
	
	IF OBJECT_ID('tempdb..#SegmentDemotions') IS NOT NULL DROP TABLE #SegmentDemotions -- results table
		CREATE TABLE #SegmentDemotions
			(DateRow INT, BrandID INT, CurrentSegmentation INT, NewSegmentation INT, Demotion INT)

	DECLARE @i INT = 1
	DECLARE @CycleStartDate DATE,
			@CycleEndDate DATE,
			@msg VARCHAR(100)

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- Loop Start', @time OUTPUT


	WHILE @i <= 14 BEGIN -- ######################################################################################## LOOP START
		
		SET @msg = 'ROCEFT - NaturalSalesByCycle Loop ' + CAST(@i AS VARCHAR(2)) + ' Started'
		EXEC Prototype.oo_TimerMessage @msg, @time OUTPUT
			
		SELECT	@CycleStartDate = CycleStart,
				@CycleEndDate = CycleEnd
		FROM	#WorkingDates
		WHERE	DateRow = @i
			
		---- One date cycle into #CINTrans
		IF OBJECT_ID('tempdb..#CINTrans') IS NOT NULL DROP TABLE #CINTrans
		SELECT	cc.BrandID
				,ct.CINID
				,ct.IsOnline
				,Amount = sum(ct.Amount)
				,TranDate = MAX(ct.TranDate)
				,TranCount = COUNT(*)
		INTO #CINTrans
		FROM #Customer mrb
		INNER hash JOIN #CC cc
		inner hash JOIN	Warehouse.Relational.ConsumerTransaction_MyRewards ct
			ON	ct.ConsumerCombinationID = cc.ConsumerCombinationID
			ON	ct.CINID = mrb.CINID
		WHERE 0 < ct.Amount AND ct.Amount >= 1800
			AND	@CycleStartDate <= ct.TranDate AND ct.TranDate <= @CycleEndDate
		GROUP BY cc.BrandID
				,ct.CINID
				,ct.IsOnline

		CREATE CLUSTERED INDEX cix_Brand_CINID ON #CinTrans (BrandID, CINID)
		---- (9,839,982 rows affected) / 00:00:20

		EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #CINTrans ', @time OUTPUT


		-- first use of #CINTrans
		INSERT INTO #SegmentOutput -- ################## OUTPUT		
			SELECT @i AS DateRow,
				ct.BrandID,
				x.Segment,
				SUM(ct.Amount) AS Sales,
				SUM(CASE WHEN ct.IsOnline = 1 THEN ct.Amount ELSE 0 END) AS OnlineSales,
				SUM(ct.TranCount) AS Transactions,
				SUM(CASE WHEN ct.IsOnline = 1 THEN ct.TranCount ELSE 0 END) AS OnlineTransactions,
				COUNT(DISTINCT ct.CINID) AS Shoppers,
				COUNT(DISTINCT CASE WHEN ct.IsOnline = 1 THEN ct.CINID ELSE NULL END) AS OnlineShoppers
			FROM #CINTrans ct
			left JOIN #InitialSegmentation  b 
				ON	ct.BrandID = b.BrandID
				AND	ct.CINID = b.CINID
			CROSS APPLY ( -- Acquire = 7
				SELECT Segment = ISNULL(b.CurrentSegmentation, 7)
			) x
			GROUP BY ct.BrandID, x.Segment
		-- (1320 rows affected) / 00:00:05

		EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #SegmentOutput ', @time OUTPUT

		INSERT INTO #SegmentSize
			SELECT	@i as DateRow,
					BrandID,
					CurrentSegmentation,
					COUNT(1) AS Size
			FROM	#InitialSegmentation
			GROUP BY BrandID,
					CurrentSegmentation

		EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #SegmentSize', @time OUTPUT

			
		IF @i < 14 BEGIN  -- ########################################## BLOCK START

			-- second use of #CINTrans, Find new LastTransactionDate  
			IF OBJECT_ID('tempdb..#CycleLastTranDate') IS NOT NULL DROP TABLE #CycleLastTranDate
			SELECT	BrandID,
					CINID,
					MAX(TranDate) AS LastTransactionDate
			INTO	#CycleLastTranDate
			FROM	#CINTrans
			GROUP BY BrandID,
						CINID

			CREATE UNIQUE CLUSTERED INDEX cix_BrandID_CINID ON #CycleLastTranDate (BrandID, CINID)
			-- (9609277 rows affected) / 00:00:10

			EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- #CycleLastTranDate ', @time OUTPUT


			-- Sort out the segmentation for next cycle
			-- Update to new LastTransactionDate
			UPDATE inti SET		
				LastTransactionDate = cl.LastTransactionDate
			FROM #InitialSegmentation inti
			INNER MERGE JOIN #CycleLastTranDate cl
				ON inti.BrandID = cl.BrandID
				AND	inti.CINID = cl.CINID
			-- (7641476 rows affected) / 00:00:21

			EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- Update LastTransactionDate ', @time OUTPUT


			-- Calculate Demotions  ################# OUTPUT
			INSERT INTO #SegmentDemotions
				SELECT	@i AS DateRow,
						inti.BrandID,
						CurrentSegmentation,
						x.NewSegmentation,
						COUNT(CINID) AS Demotion
				FROM #InitialSegmentation inti
				JOIN #JoinDates d
					ON inti.BrandID = d.BrandID
					AND	d.DateRow = (@i + 1)
				CROSS APPLY (
					SELECT NewSegmentation = CASE
						WHEN inti.LastTransactionDate < d.AcquireDate THEN 7
						WHEN d.AcquireDate <= inti.LastTransactionDate AND inti.LastTransactionDate < d.LapsedDate THEN 8
						ELSE 9 END
				) x
				WHERE inti.CurrentSegmentation > x.NewSegmentation
				GROUP BY inti.BrandID,
						CurrentSegmentation,
						x.NewSegmentation
			-- (893 rows affected) / 00:00:06

			EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- Update Calculate Demotions', @time OUTPUT


			-- Add new Segment
			;WITH SelectedRows AS (
				SELECT 
					inti.CurrentSegmentation,  
					x.NewSegmentation
				FROM #InitialSegmentation inti
				JOIN #JoinDates d
					ON inti.BrandID = d.BrandID
					AND	d.DateRow = (@i + 1)
				CROSS APPLY ( -- x
					SELECT NewSegmentation = CASE
						WHEN inti.LastTransactionDate < d.AcquireDate THEN 7
						WHEN d.AcquireDate <= inti.LastTransactionDate AND inti.LastTransactionDate < d.LapsedDate THEN 8
						ELSE 9 END
				) x
				WHERE inti.CurrentSegmentation <> x.NewSegmentation				
			)
			UPDATE SelectedRows SET
				CurrentSegmentation = NewSegmentation
			-- (4704162 rows affected) / 00:00:40

			EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- Update NewSegmentation ', @time OUTPUT


			-- Delete Customers who are Acquire
			DELETE FROM #InitialSegmentation
			WHERE	CurrentSegmentation = 7
			-- (1813161 rows affected) / 00:00:10

			EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- Delete Acquire', @time OUTPUT


			-- Insert the Acquire Customers who have shopped
			DROP INDEX cix_BrandID_CINID ON #InitialSegmentation 
			INSERT INTO #InitialSegmentation
				SELECT	BrandID,
						CINID,
						LastTransactionDate,
						9 AS CurrentSegmentation,
						0 AS NewSegmentation
				FROM	#CycleLastTranDate td
				WHERE	NOT EXISTS
					(	SELECT 1
						FROM	#InitialSegmentation inti
						WHERE	td.BrandID = inti.BrandID
							AND	td.CINID = inti.CINID)

			CREATE CLUSTERED INDEX cix_BrandID_CINID ON #InitialSegmentation (BrandID,CINID)
			-- (9,610,361 rows affected) / 00:00:17

			EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- Insert Additions ', @time OUTPUT



		END -- IF @i < 14 -- ########################################## BLOCK END
			

		SET @i = @i + 1

	END -- WHILE @i <= 1  -- ######################################################################################## LOOP END

	EXEC Prototype.oo_TimerMessage 'ROCEFT - NaturalSalesByCycle -- Script End', @time OUTPUT

	-- Save The New Run Output's
	IF @Bespoke = 1
		BEGIN
			SELECT	a.BrandID,
					a.DateRow AS CycleID,
					d.Seasonality_CycleID AS Seasonality_CycleID,
					a.Segment,
					CASE
					  WHEN a.Segment = 7 THEN @TotalCustomers - COALESCE(e.LapsedShopper,0)
					  ELSE b.Population
					END AS SegmentSize,
					a.Shoppers AS Promoted,
					c.Demotion AS Demoted,
					0 AS OnOffer,
					a.Sales,
					a.OnlineSales,
					a.Transactions,
					a.OnlineTransactions,
					a.Shoppers AS Spenders,
					a.OnlineShoppers AS OnlineSpenders,
					1.0*c.Demotion/NULLIF(b.Population,0) AS DecayRate,
					1.0*a.Shoppers/NULLIF(b.Population,0) AS PromotionRate,
					0 AS OnOfferRate
			FROM	#WorkingDates d
			JOIN	#SegmentOutput a
				ON	a.DateRow = d.DateRow
			LEFT JOIN #SegmentSize b
				ON	a.DateRow = b.DateRow
				AND	a.BrandID = b.BrandID
				AND	a.Segment = b.Segment
			LEFT JOIN #SegmentDemotions c
				ON	a.DateRow = c.DateRow
				AND	a.BrandID = c.BrandID
				AND	a.Segment = c.CurrentSegmentation
			LEFT JOIN
				(	SELECT	DateRow,
							BrandID,
							SUM(Population) AS LapsedShopper
					FROM	#SegmentSize
					GROUP BY DateRow,
							BrandID
				) e
				ON	a.DateRow = e.DateRow
				AND	a.BrandID = e.BrandID
			ORDER BY 1,2,4


			-- Print out distribution
			DECLARE @MaxDateRow INT =  ( SELECT	MAX(DateRow) FROM #WorkingDates )

			SELECT	Segment,
					Population,
					1.0 * Population / NULLIF(@TotalCustomers,0) AS Distribution
			FROM  (
					SELECT	Segment,
							s.Population
					FROM	#SegmentSize s
					WHERE	DateRow = @MaxDateRow
					UNION
					SELECT	7 AS Segment,
							@TotalCustomers - SUM(Population) AS Population
					FROM	#SegmentSize
					WHERE	DateRow = @MaxDateRow
				  ) a
			ORDER BY 1
		END
	ELSE
		BEGIN

			-- Clean up the storage table
			IF @BrandList IS NULL
				BEGIN
					TRUNCATE TABLE Warehouse.ExcelQuery.ROCEFT_NaturalSpendCycles_MyReward
				END
			ELSE
				BEGIN
					DELETE FROM Warehouse.ExcelQuery.ROCEFT_NaturalSpendCycles_MyReward
					WHERE	CHARINDEX(',' + CAST(BrandID AS VARCHAR) + ',', ',' + @BrandList + ',') > 0
				END

			-- Insert the output
			INSERT INTO Warehouse.ExcelQuery.ROCEFT_NaturalSpendCycles_MyReward
				SELECT	a.BrandID,
						a.DateRow AS CycleID,
						d.Seasonality_CycleID AS Seasonality_CycleID,
						a.Segment,
						CASE
						  WHEN a.Segment = 7 THEN @TotalCustomers - COALESCE(e.LapsedShopper,0)
						  ELSE b.Population
						END AS SegmentSize,
						a.Shoppers AS Promoted,
						c.Demotion AS Demoted,
						0 AS OnOffer,
						a.Sales,
						a.OnlineSales,
						a.Transactions,
						a.OnlineTransactions,
						a.Shoppers AS Spenders,
						a.OnlineShoppers AS OnlineSpenders,
						1.0*c.Demotion/NULLIF(b.Population,0) AS DecayRate,
						1.0*a.Shoppers/NULLIF(b.Population,0) AS PromotionRate,
						0 AS OnOfferRate
				FROM	#WorkingDates d
				JOIN	#SegmentOutput a
					ON	a.DateRow = d.DateRow
				LEFT JOIN #SegmentSize b
					ON	a.DateRow = b.DateRow
					AND	a.BrandID = b.BrandID
					AND	a.Segment = b.Segment
				LEFT JOIN #SegmentDemotions c
					ON	a.DateRow = c.DateRow
					AND	a.BrandID = c.BrandID
					AND	a.Segment = c.CurrentSegmentation
				LEFT JOIN
					(	SELECT	DateRow,
								BrandID,
								SUM(Population) AS LapsedShopper
						FROM	#SegmentSize
						GROUP BY DateRow,
								BrandID
					) e
					ON	a.DateRow = e.DateRow
					AND	a.BrandID = e.BrandID
				ORDER BY 1,2,4
		END
END