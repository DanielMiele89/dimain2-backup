-- =============================================
-- Author:		<Author, Conal McBrien>
-- Create date: <Create Date, 15th Jan 2021,>
-- Description:	<Description, Calculating all engagement metrics per customer as of GETDATE(), populates table Warehouse.InsightArchive.EngagementScore>
-- =============================================
CREATE PROCEDURE [Relational].[EngagementScoreCalculation]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

DECLARE @CYCLE DATE = GETDATE() --'2020-07-16', 
DECLARE @LASTCALENDARMONTH DATE , @LAST8WEEKS DATE
DECLARE @Engaged_TimeFrame DATE = DATEADD(YEAR, -1, @CYCLE)
DECLARE @TimeStart DATETIME = GETDATE(), @time DATETIME, @RowsAffected INT

EXEC Prototype.oo_TimerMessage_V2 '#CUSTOMERS', @RowsAffected, @time OUTPUT
EXEC Prototype.oo_TimerMessage_V2 'Script -- START', @RowsAffected, @time OUTPUT


---- GET CUSTOMERS
IF OBJECT_ID('TEMPDB..#CUSTOMERS') IS NOT NULL DROP TABLE #CUSTOMERS
SELECT	DISTINCT FanID
INTO	#CUSTOMERS
FROM	Warehouse.Relational.CUSTOMER C
WHERE	C.ACTIVATEDDATE < @CYCLE
	AND (C.DEACTIVATEDDATE IS NULL OR C.DEACTIVATEDDATE >= @CYCLE)

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #CUSTOMERS(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#CUSTOMERS - END', @RowsAffected, @time OUTPUT


---- GET MARKETINGPERMISSION
IF OBJECT_ID('TEMPDB..#NONMARKETABLE') IS NOT NULL DROP TABLE #NONMARKETABLE
SELECT	DISTINCT FanID
INTO	#NONMARKETABLE
FROM	Warehouse.Relational.Customer_MarketableByEmailStatus_MI M
WHERE	MARKETABLEID IN (2,3)
	AND M.StartDate < @CYCLE
	AND (M.EndDate IS NULL OR M.EndDate >= @CYCLE)
SET @RowsAffected = @@ROWCOUNT 

CREATE CLUSTERED INDEX INX ON #NONMARKETABLE(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#NONMARKETABLE - END', @RowsAffected, @time OUTPUT


-- DOES NOT HAVE VALID EMAIL
IF OBJECT_ID('TEMPDB..#NOVALIDEMAIL') IS NOT NULL DROP TABLE #NOVALIDEMAIL
SELECT	DISTINCT FanID
INTO	#NOVALIDEMAIL
FROM	Warehouse.Relational.Customer
WHERE	Hardbounced = 1 
	OR  EmailStructureValid = 0

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #NOVALIDEMAIL(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#NOVALIDEMAIL - END', @RowsAffected, @time OUTPUT


-- CREDIT CARD AND REWARDACCOUNT
IF OBJECT_ID ('TEMPDB..#BAID') IS NOT NULL DROP TABLE #BAID
SELECT	DISTINCT BANKACCOUNTID
INTO	#BAID
FROM	SLC_Report.dbo.BankAccountTypeHistory BT
WHERE	StartDate < @CYCLE
	AND (EndDate IS NULL OR EndDate >= @CYCLE)
	AND LEFT(TYPE,1) = 'Q'

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #BAID(BANKACCOUNTID)
EXEC Prototype.oo_TimerMessage_V2 '#BAID - END', @RowsAffected, @time OUTPUT

-- FIND MYREWARDS ACCOUNTS
IF OBJECT_ID ('TEMPDB..#MYREWARDSACCOUNTS') IS NOT NULL DROP TABLE #MYREWARDSACCOUNTS
SELECT    DISTINCT C.FanID, BAM.BankAccountID
INTO    #MYREWARDSACCOUNTS
FROM    SLC_Report..IssuerCustomer IC
JOIN    SLC_Report..IssuerBankAccount IBA
    ON  IC.ID = IBA.IssuerCustomerID
JOIN    SLC_Report..BankAccount BA
    ON  IBA.BANKACCOUNTID = BA.ID
JOIN    Warehouse.Relational.Customer C
    ON  C.SourceUID = IC.SourceUID
    AND CONCAT(C.ClubID, ic.IssuerID) IN (1322, 1381)        --    RF Added
JOIN    #BAID BAM
    ON  BAM.BANKACCOUNTID = BA.ID

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #MYREWARDSACCOUNTS(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#MYREWARDSBANKACCOUNTS - END', @RowsAffected, @time OUTPUT

-- FIND CREDIT CARD CUSTOMERS
IF OBJECT_ID('TEMPDB..#HASCC') IS NOT NULL DROP TABLE #HASCC
SELECT DISTINCT FanID
INTO #HASCC
FROM Warehouse.Relational.CustomerPaymentMethodsAvailable CPA
WHERE
StartDate < @CYCLE
AND (EndDate IS NULL OR EndDate >= @CYCLE)
AND CPA.PaymentMethodsAvailableID IN (1,2)

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #HASCC(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#HASCC - END', @RowsAffected, @time OUTPUT

-- FIND CUSTOMERS WITH MULTIPLE MYREWARDS PRODUCTS
IF OBJECT_ID('TEMPDB..#MULTIPLEPRODUCTS') IS NOT NULL DROP TABLE #MULTIPLEPRODUCTS
SELECT	FanID
INTO	#MULTIPLEPRODUCTS
FROM	#HASCC C
WHERE
EXISTS (SELECT	1
		FROM	#MYREWARDSACCOUNTS MRA
		WHERE	MRA.FanID = C.FanID
		)

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #MULTIPLEPRODUCTS(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#MULTIPLEPRODUCTS - END', @RowsAffected, @time OUTPUT


-- DDS
SET @LASTCALENDARMONTH = DATEADD(MONTH, -1, @CYCLE)

IF OBJECT_ID('TEMPDB..#DDS') IS NOT NULL DROP TABLE #DDS
SELECT	DISTINCT FanID
INTO	#DDS
FROM	Warehouse.Relational.ADDITIONALCASHBACKAWARD ADA
WHERE	ADA.TranDate < @CYCLE
	AND ADA.TranDate >= @LASTCALENDARMONTH
	AND ADA.AdditionalCashbackAwardTypeID IN (8, 10, 25, 37)

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #DDS(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#DDS - END', @RowsAffected, @time OUTPUT


-- CARD USAGE
SET @LAST8WEEKS = DATEADD(WEEK, -8, @CYCLE)

IF OBJECT_ID('TEMPDB..#CARDUSAGE') IS NOT NULL DROP TABLE #CARDUSAGE
SELECT	DISTINCT FanID
INTO	#CARDUSAGE
FROM	Warehouse.Relational.CONSUMERTRANSACTION_MYREWARDS CT
JOIN	Warehouse.Relational.CINLIST CL 
	ON  CL.CINID = CT.CINID
JOIN	Warehouse.Relational.CUSTOMER C 
	ON  C.SOURCEUID = CL.CIN
WHERE	CT.TranDate < @CYCLE
	AND CT.TranDate >= @LAST8WEEKS

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #CARDUSAGE(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#CARDUSAGE - END', @RowsAffected, @time OUTPUT


-- OFFER USAGE
SET @LAST8WEEKS = DATEADD(WEEK, -8, @CYCLE)

IF OBJECT_ID('TEMPDB..#OFFERUSAGE') IS NOT NULL DROP TABLE #OFFERUSAGE
SELECT	DISTINCT CT.FanID
INTO	#OFFERUSAGE
FROM	Warehouse.Relational.PartnerTrans CT
WHERE	CT.TransactionDate < @CYCLE
	AND CT.TransactionDate >= @LAST8WEEKS

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #OFFERUSAGE(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#OFFERUSAGE - END', @RowsAffected, @time OUTPUT


-- NEWSLETTER EMAIL OPENS
IF OBJECT_ID('TEMPDB..#NL_SENDS_PRE') IS NOT NULL DROP TABLE #NL_SENDS_PRE
SELECT	DISTINCT SendDate
INTO	#NL_SENDS_PRE
FROM	Warehouse.Relational.EmailCampaign EC
WHERE	EC.CampaignName LIKE '%NEWSLETTER%'
	AND SendDate >= DATEADD(WEEK, -22, @CYCLE)
SET @RowsAffected = @@ROWCOUNT 
EXEC Prototype.oo_TimerMessage_V2 '#NL_SENDS_PRE - END', @RowsAffected, @time OUTPUT

-- NEWSLETTER SENDS
IF OBJECT_ID('TEMPDB..#NL_SENDS') IS NOT NULL DROP TABLE #NL_SENDS
SELECT	  SendDate
		, ROW_NUMBER() OVER (ORDER BY SEndDate DESC) AS Number
INTO	#NL_SENDS
FROM	#NL_SENDS_PRE
SET @RowsAffected = @@ROWCOUNT 
EXEC Prototype.oo_TimerMessage_V2 '#NL_SENDS - END', @RowsAffected, @time OUTPUT

-- EMAIL OPEN DATA
IF OBJECT_ID('TEMPDB..#EMAILSOPENED') IS NOT NULL DROP TABLE #EMAILSOPENED
SELECT	  FanID
		, COUNT(DISTINCT CAMPAIGNKEY) AS EmailsOpened
INTO	#EMAILSOPENED
FROM	Warehouse.Relational.EMAILEVENT EE
WHERE	EmailEventCodeID IN (1301, 605)
AND EXISTS (
			SELECT	1
			FROM	Warehouse.Relational.EMAILCAMPAIGN EC
			JOIN	(SELECT SendDate FROM #NL_SENDS WHERE Number <= 8) D 
				ON  D.SEndDate = EC.SEndDate
			WHERE	EC.CAMPAIGNNAME LIKE '%NEWSLETTER%'
				AND EC.CAMPAIGNKEY = EE.CAMPAIGNKEY
			)
GROUP BY
FanID

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #EMAILSOPENED(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#EMAILSOPENED - END', @RowsAffected, @time OUTPUT


-- REDEMPTION
IF OBJECT_ID('TEMPDB..#CASHREDEMPTION') IS NOT NULL DROP TABLE #CASHREDEMPTION
SELECT	DISTINCT FanID
INTO	#CASHREDEMPTION
FROM	Warehouse.Relational.Redemptions R
WHERE	R.RedeemType = 'CASH'
	AND R.RedeemDate < @CYCLE
	AND R.RedeemDate >= DATEADD(WEEK, -16, @CYCLE)

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #CASHREDEMPTION(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#CASHREDEMPTION - END', @RowsAffected, @time OUTPUT

-- TRADE UP REDEMPTION
IF OBJECT_ID('TEMPDB..#TRADEUPCHARITYREDEMPTION') IS NOT NULL DROP TABLE #TRADEUPCHARITYREDEMPTION
SELECT	DISTINCT FanID
INTO	#TRADEUPCHARITYREDEMPTION
FROM	Warehouse.Relational.REDEMPTIONS R
WHERE	R.RedeemType <> 'CASH'
	AND R.RedeemDate < @CYCLE
	AND R.RedeemDate >= DATEADD(WEEK, -16, @CYCLE)

SET @RowsAffected = @@ROWCOUNT 
CREATE CLUSTERED INDEX INX ON #TRADEUPCHARITYREDEMPTION(FanID)
EXEC Prototype.oo_TimerMessage_V2 '#TRADEUPREDEMPTION - END', @RowsAffected, @time OUTPUT

-- LOGIN DATA
IF OBJECT_ID('TEMPDB..#LOGINS') IS NOT NULL DROP TABLE #LOGINS
SELECT	  WL.FanID
		, COUNT(DISTINCT CAST(WL.TRACKDATE AS DATE)) AS Logins
INTO	#LOGINS
FROM	Warehouse.Relational.WEBLOGINS WL
WHERE	WL.TRACKDATE < @CYCLE
	AND WL.TRACKDATE >= DATEADD(WEEK, -16, @CYCLE)
	AND NOT EXISTS (
					SELECT	1
					FROM	Warehouse.Relational.REDEMPTIONS R
					WHERE	CAST(R.REDEEMDATE AS DATE) = CAST(WL.TRACKDATE AS DATE)
						AND R.FanID = WL.FanID
					)
GROUP BY  WL.FanID
SET @RowsAffected = @@ROWCOUNT 
EXEC Prototype.oo_TimerMessage_V2 '#LOGINS - END', @RowsAffected, @time OUTPUT

-- PRELIMINARY OUTPUT
IF OBJECT_ID('TEMPDB..#RESULTS_RAW') IS NOT NULL DROP TABLE #RESULTS_RAW
SELECT	  C.FanID
		, @CYCLE AS [Date]
		, COUNT(1) AS CUSTOMERS
		, SUM(CASE WHEN T1.FanID IS NULL THEN 1 ELSE 0 END) AS Marketable
		, SUM(CASE WHEN T2.FanID IS NULL THEN 1 ELSE 0 END) AS ValidEmail
		, SUM(CASE WHEN T3.FanID IS NOT NULL THEN 1 ELSE 0 END) AS MultipleProducts
		, SUM(CASE WHEN T4.FanID IS NOT NULL THEN 1 ELSE 0 END) AS DDs
		, SUM(CASE WHEN T5.FanID IS NOT NULL THEN 1 ELSE 0 END) AS CardUsage
		, SUM(CASE WHEN T6.FanID IS NOT NULL THEN 1 ELSE 0 END) AS OfferUsage
		, SUM(CASE WHEN T7.FanID IS NOT NULL THEN T7.EMAILSOPENED ELSE 0 END) AS EmailOpens
		, SUM(CASE WHEN T8.FanID IS NOT NULL THEN 1 ELSE 0 END) AS CashRedemption
		, SUM(CASE WHEN T9.FanID IS NOT NULL THEN 1 ELSE 0 END) AS TradeUpOrCharityRedemption
		, SUM(CASE WHEN T10.FanID IS NOT NULL THEN T10.LOGINS ELSE 0 END) AS Logins_WithoutRedemption

INTO		#RESULTS_RAW
FROM		#CUSTOMERS C
LEFT JOIN	#NONMARKETABLE T1 
		ON  T1.FanID = C.FanID 
LEFT JOIN	#NOVALIDEMAIL T2 
		ON  T2.FanID = C.FanID 
LEFT JOIN	#MULTIPLEPRODUCTS T3 
		ON  T3.FanID = C.FanID 
LEFT JOIN	#DDS T4 
		ON  T4.FanID = C.FanID
LEFT JOIN	#CARDUSAGE T5 
		ON  T5.FanID = C.FanID
LEFT JOIN	#OFFERUSAGE T6 
		ON  T6.FanID = C.FanID
LEFT JOIN	#EMAILSOPENED T7 
		ON  T7.FanID = C.FanID
LEFT JOIN	#CASHREDEMPTION T8 
		ON  T8.FanID = C.FanID
LEFT JOIN	#TRADEUPCHARITYREDEMPTION T9 
		ON  T9.FanID = C.FanID
LEFT JOIN	#LOGINS T10 
		ON  T10.FanID = C.FanID
GROUP BY	C.FanID
SET @RowsAffected = @@ROWCOUNT 
EXEC Prototype.oo_TimerMessage_V2 '#RESULTS_RAW - END', @RowsAffected, @time OUTPUT


-- FINAL OUTPPUT 
IF OBJECT_ID('TEMPDB..#RESULTS') IS NOT NULL DROP TABLE #RESULTS
SELECT	  C.FanID
		, @CYCLE AS [Date]
		, COUNT(1) AS Customer
		, SUM(CASE WHEN T1.FanID IS NULL THEN 15 ELSE 0 END) AS Marketable
		, SUM(CASE WHEN T2.FanID IS NULL THEN 10 ELSE 0 END) AS ValidEmail
		, SUM(CASE WHEN T3.FanID IS NOT NULL THEN 8 ELSE 0 END) AS MultipleProducts
		, SUM(CASE WHEN T4.FanID IS NOT NULL THEN 5 ELSE 0 END) AS DDs
		, SUM(CASE WHEN T5.FanID IS NOT NULL THEN 2 ELSE 0 END) AS CardUsage
		, SUM(CASE WHEN T6.FanID IS NOT NULL THEN 5 ELSE 0 END) AS OfferUsage
		, SUM(CASE 
			WHEN T7.FanID IS NOT NULL AND T7.EmailsOpened * 5 > 15 THEN 15 
			WHEN T7.FanID IS NOT NULL THEN T7.EmailsOpened * 5 		
			ELSE 0 END) AS EmailOpens
		, SUM(CASE 
			WHEN T9.FanID IS NOT NULL THEN 20 
			WHEN T8.FanID IS NOT NULL THEN 10 
			ELSE 0 END) AS Redemption
		, SUM(CASE 
			WHEN T10.FanID IS NOT NULL AND T10.Logins * 10 > 20 THEN 20 
			WHEN T10.FanID IS NOT NULL THEN T10.LOGINs	 * 10 		
			ELSE 0 END) AS Logins_WithoutRedemption

INTO		#RESULTS
FROM		#CUSTOMERS C
LEFT JOIN	#NONMARKETABLE T1 
		ON  T1.FanID = C.FanID 
LEFT JOIN	#NOVALIDEMAIL T2 
		ON  T2.FanID = C.FanID 
LEFT JOIN	#MULTIPLEPRODUCTS T3 
		ON  T3.FanID = C.FanID 
LEFT JOIN	#DDS T4 
		ON  T4.FanID = C.FanID
LEFT JOIN	#CARDUSAGE T5 
		ON  T5.FanID = C.FanID
LEFT JOIN	#OFFERUSAGE T6 
		ON  T6.FanID = C.FanID
LEFT JOIN	#EMAILSOPENED T7 
		ON  T7.FanID = C.FanID
LEFT JOIN	#CASHREDEMPTION T8
		ON  T8.FanID = C.FanID
LEFT JOIN	#TRADEUPCHARITYREDEMPTION T9 
		ON  T9.FanID = C.FanID
LEFT JOIN	#LOGINS T10 
		ON  T10.FanID = C.FanID

GROUP BY	C.FanID
SET @RowsAffected = @@ROWCOUNT 
EXEC Prototype.oo_TimerMessage_V2 '#RESULTS - END', @RowsAffected, @time OUTPUT


-- ADD RESULTS TO CALCULATE ENGAGEMENT SCORE PER FANID
IF OBJECT_ID('TEMPDB..#RESULTS_OVERALL') IS NOT NULL DROP TABLE #RESULTS_OVERALL
SELECT 
FanID, 
MARKETABLE +
VALIDEMAIL +
MULTIPLEPRODUCTS +
DDS +
CARDUSAGE +
OFFERUSAGE +
EMAILOPENS +
REDEMPTION +
LOGINS_WITHOUTREDEMPTION AS OVERALLSCORE

INTO #RESULTS_OVERALL
FROM #RESULTS
SET @RowsAffected = @@ROWCOUNT 
EXEC Prototype.oo_TimerMessage_V2 '#RESULTS_OVERALL - END', @RowsAffected, @time OUTPUT

-- ENGAGEMENT SCORE PER CUSTOMER
IF OBJECT_ID('TEMPDB..#SCORE_PER_CUSTOMER') IS NOT NULL DROP TABLE #SCORE_PER_CUSTOMER
SELECT		  R.FanID
			, R.OVERALLSCORE AS Engagement_Score  
			, CINID

INTO		#SCORE_PER_CUSTOMER
FROM		#RESULTS_OVERALL R
LEFT JOIN	Warehouse.Relational.Customer C
		ON  R.FanID = C.FanID
LEFT JOIN	Warehouse.Relational.CINList CIN
		ON  C.SourceUID = CIN.CIN
SET @RowsAffected = @@ROWCOUNT 
EXEC Prototype.oo_TimerMessage_V2 '#SCORE_PER_CUSTOMER - END', @RowsAffected, @time OUTPUT


-- DEFINING GSBB CATEGORIES


IF OBJECT_ID('tempdb..#EmailEvents') IS NOT NULL DROP TABLE #EmailEvents
SELECT	  ee.EventDate
		, ee.FanID
		, ee.CampaignKey
INTO	#EmailEvents
FROM	Relational.EmailEvent ee	WITH (NOLOCK)
JOIN	Relational.EmailCampaign ec	WITH (NOLOCK)
	ON  ec.CampaignKey = ee.CampaignKey
WHERE	ee.EventDate >= @Engaged_TimeFrame 
	AND	ee.EventDate <  @CYCLE	
	AND	ee.EmailEventCodeID IN (1301, 605)
	AND	ec.CampaignName LIKE '%Newsletter%'
GROUP BY  ee.EventDate	
		, ee.FanID
		, ee.CampaignKey 
CREATE CLUSTERED INDEX inx_eventDate ON #EmailEvents(EventDate)

IF OBJECT_ID('tempdb..#MAX_ENGAGEMENT_DATE') IS NOT NULL DROP TABLE #MAX_ENGAGEMENT_DATE
SELECT	  A.FanID
		, MAX(ActionDate) AS ActionDate
INTO	#MAX_ENGAGEMENT_DATE
FROM	(
		SELECT	  FanID
				, ee.EventDate AS ActionDate 
		FROM	#EmailEvents ee with (nolock)
		WHERE	EventDate >= @Engaged_TimeFrame 
			AND EventDate <  @CYCLE
		UNION  ALL
		SELECT	  FanID
				, CONVERT(DATE, wl.TrackDate) AS ActionDate 
		FROM	Relational.WebLogins wl with (nolock)
		WHERE	wl.TrackDate >= @Engaged_TimeFrame  
			AND wl.TrackDate <  @CYCLE
		) A
GROUP BY  A.FanID

IF OBJECT_ID('TEMPDB..#GSBB') IS NOT NULL DROP TABLE #GSBB
SELECT		  A.CINID
			, A.FanID
			, CASE	WHEN DATEDIFF(day, ISNULL(ActionDate,DATEADD(YEAR,-2,@CYCLE)),  @CYCLE) BETWEEN 0 AND 28	THEN 'Gold'
					WHEN DATEDIFF(day, ISNULL(ActionDate,DATEADD(YEAR,-2,@CYCLE)),  @CYCLE) BETWEEN 29 AND 84	THEN 'Silver'	
					WHEN DATEDIFF(day, ISNULL(ActionDate,DATEADD(YEAR,-2,@CYCLE)),  @CYCLE) BETWEEN 85 AND 364	THEN 'Bronze'
					ELSE 'Blue' END AS Classification
INTO		#GSBB
FROM		(
				SELECT		  CIN.CINID
							, C.FanID
				FROM		Warehouse.Relational.Customer C
				JOIN		Warehouse.Relational.CINList CIN
						ON  C.SourceUID = CIN.CIN
				WHERE		C.DeactivatedDate IS NULL
						AND C.CurrentlyActive = 1
			) A
LEFT JOIN	(
				SELECT	  FanID
						, ActionDate
				FROM	#MAX_ENGAGEMENT_DATE M
			) B
ON  A.FanID = B.FanID

-- FanID, CINID, SourceUID, ClubID, Engagement Score, Classification, Rank

IF OBJECT_ID('TEMPDB..#TEST__FINAL_TABLE') IS NOT NULL DROP TABLE #TEST__FINAL_TABLE
SELECT		  s.FanID
			, S.CINID
			, C.SourceUID
			, C.ClubID
			, S.Engagement_Score
			, G.Classification
			, ROW_NUMBER() OVER (ORDER BY S.ENGAGEMENT_SCORE DESC ,S.FANID DESC ) AS Engagement_Rank
INTO		#TEST__FINAL_TABLE
FROM		#SCORE_PER_CUSTOMER S
LEFT JOIN	#GSBB G
		ON  S.FanID = G.FanID
LEFT JOIN	Warehouse.Relational.Customer C
		ON  S.FanID = C.FanID


IF OBJECT_ID('Warehouse.InsightArchive.EngagementScore') IS NOT NULL DROP TABLE Warehouse.InsightArchive.EngagementScore
SELECT	  FanID
		, CINID = CAST(NULL AS varchar(50))
		, SourceUID
		, ClubID
		, [Classification] = CAST(NULL AS varchar(50))
		, Engagement_Score
		, Engagement_Rank
INTO	Warehouse.InsightArchive.EngagementScore
FROM	#TEST__FINAL_TABLE
WHERE	0 = 1


INSERT INTO Warehouse.InsightArchive.EngagementScore
	(FanID, CINID, SourceUID, ClubID, [Classification], Engagement_Score, Engagement_Rank)
SELECT	FanID, CINID, SourceUID, ClubID, [Classification], Engagement_Score, Engagement_Rank
FROM	#TEST__FINAL_TABLE
	
END